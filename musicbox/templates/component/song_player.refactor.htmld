{#
	The base of player decorator
	{% block CSS_PROGRESSBAR %}
	{% block CSS_MISCELLANEOUS %}
	{% block CSS_PLAYING_ITEM %}

	class player
		{% block PLAYER_MEMBER %}
		{% block PLAY_NEW %}
			var item
			{% block RENDER_NEW_PLAYING_ITEM %}
				var progress_bar
			{% endblock %}
		{% endblock %}
		{% block PLAY_START %}
		{% block PLAY_STOP %}
		{% block PLAY_SEEK %}
			var newSeekTime
		{% endblock %}
#}
<style>
.control-button{
	margin: 10px;
	float: left;
	background: none;
}

.function-button{
	margin: 10px;
	float: right;
}

.playlist{
margin: 10px;
width: 300px;
overflow: hidden;
clear: left;
}

.volume-bar{
float: left;
margin: 8px;
cursor: pointer;
}

.vbar{
width: 5px;
float: left;
margin: 2px;
}

.placer-active{
background: gold;
}

.moving{
position: absolute;
background: pink;
border: 1px solid white;
}

.vbar-on{
	//background: LawnGreen;
	background: rgb(120, 49, 20);
}

.vbar-off{
	background: rgba(25, 25, 25, 1);
}

#star{
	background: black;
	color: yellow;
}

.player{
	position: absolute;
	width: 350px;
	background: rgba(255,255,255, 0.15);
	border-radius: 20px;
}
.loop-single:before{content:"\e115";}
.loop-single:after{content:"1";}
.loop:before{content:"\e115";}
.loop-random:before{content:"\e110";}
.non-loop:before{content:"\e115"; color: rgba(204, 204, 204,0.5);}
.back-button:before{content:"\e071";}
.play-button:before{content:"\e072";}
.pause-button:before{content:"\e073";}
.save-button:before{content:"\e081";}
.close-button:before{content:"\e083";}
.played-progress{height: 100%;}
.function-panel{
width: 100%; background: rgba(255,200,100, 1); position: absolute;
border-radius: 20px 20px 0 0; overflow: hidden;
}
{% block CSS_PROGRESSBAR %}
.mprogress-bar {
	position: absolute;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	cursor: pointer;
	z-index: 1;
	overflow: hidden;
}
{% endblock CSS_PROGRESSBAR %}

{% block CSS_PLAYING_ITEM %}
.playing-item{
	height: 36px;
	color: gold;
}
.playitem{
cursor: pointer;
width: 300px;
		white-space: nowrap;
		 -moz-user-select: -moz-none;
		 -khtml-user-select: none;
		 -webkit-user-select: none;
		 -ms-user-select: none;
		 user-select: none;
	color: white;
	border-top: 1px solid white;
	user-select: none;
}
.playing-item{
	background: rgb(63, 63, 63);
}
.np-item{
	height: 35px;
	padding: 5px;
}
.item-title{
	height: 100%;
	width: 100%;
	position: relative;
	background: rgb(63, 63, 63);
	color: gold;
}
.item-marquee{
padding: 5px;
width: 100%;
height: 100%;
}
{% endblock CSS_PLAYING_ITEM %}

{% block CSS_MISCELLANEOUS %}
{% endblock CSS_MISCELLANEOUS %}
</style>
<body>
</body>
<script src="/musicbox/static/js/lrc.js"></script>
<script>
var g_moving = null;
var g_moving_player = null;
var g_selected_player = null;
var g_activePlacer = null;
var g_counter = [];
$("body").get(0).addEventListener("mousemove", function(e){
	if(g_moving != null){
		g_moving.css("left", e.pageX + 20);
		g_moving.css("top", e.pageY + 10);
		if(!e.in_p && g_activePlacer){
			g_activePlacer.remove();
			g_activePlacer = null;
		}
	}
});
$("body").get(0).addEventListener("mousemove", function(e){
	if(g_moving_player && g_moving_player != null){
		g_moving_player.css("left", e.pageX + g_moving_player.get(0).dx);
		g_moving_player.css("top", e.pageY + g_moving_player.get(0).dy);
	}
});
$("body").get(0).addEventListener("mouseup", function(e){
	for(var cnt; cnt = g_counter.pop() ; clearTimeout(cnt));
});

var render_player = function(objs, x, y){
	{% block PLAYER_MEMBER %}
	{% endblock PLAYER_MEMBER %}
	var progress_bar = (function (){
		var bar = $("<div class='mprogress-bar'></div");
	
		bar.append($("<div class='played-progress'></div>").css("width", "0%"));
		bar.get(0).addEventListener('click' ,function(event){
			{% block PLAY_SEEK %}
			var newSeekTime = audio.get(0).currentTime =
			audio.get(0).duration * (event.clientX - this.getBoundingClientRect().left) / this.clientWidth;
			event.stopPropagation();
			{% endblock PLAY_SEEK %}
		}, false);
		bar.get(0).addEventListener('mousedown' ,function(e){e.stopPropagation();});
		return bar;
	})();
	var player = $("<div class=\"player\">");
	player.css("left", x);
	player.css("top", y);
	player.get(0).playNewSong = function(item){
		audio.get(0).pause();
		{% block PLAY_NEW %}
		if(player.get(0).prev_play_item)
		{
			progress_bar.detach();
			var prev = player.get(0).prev_play_item;
			prev.removeClass("playing-item").addClass("np-item");
			prev.html(prev.get(0).obj.name);
		}
		{% block RENDER_NEW_PLAYING_ITEM %}
		item.removeClass("np-item").addClass("playing-item").empty().append($("<div class='item-title'></div>").append($("<marquee class='item-marquee' direction='right'>"+item.get(0).obj.name+"</marquee>")).append(progress_bar));
		{% endblock RENDER_NEW_PLAYING_ITEM %}
		progress_bar.children(".played-progress").css("width", "0%");
		player.get(0).prev_play_item = item;
		setTimeout(function(){
			var tmp = audio.attr("src", item.get(0).obj.location);
			tmp.get(0).play();
		}, 1000);
		{% endblock PLAY_NEW %}
	};
	player.get(0).addEventListener("mousedown", function(e){
		this.dx = parseInt($(this).css("left")) - e.pageX;
		this.dy = parseInt($(this).css("top")) - e.pageY;
		if(g_selected_player && !g_selected_player.is($(this))){
			g_selected_player.children(".side-panel").children(".function-panel").animate({
				height: 0,
				top:	0,
			}, 100);
		}
		function_panel.animate({
			height: 35,
			top: -35
		}, 100);
		g_selected_player = g_moving_player = $(this);
	});
	player.get(0).addEventListener("mouseup", function(e){
		if(g_moving_player && g_moving_player.is($(this))) g_moving_player = null;
	});

	var side_panel = $("<div class=\"side-panel\"></div>");

	var function_panel = (function(){
		var panel = $("<div class=\"function-panel\"></div>");
		var save_button = (function(){
			var btn = $("<div class=\"save-button glyphicon button function-button\"></div>");
			
			return btn;
		})();
		var close_button = (function(){
			var btn = $("<div class=\"close-button glyphicon button function-button\"></div>");
			btn.get(0).addEventListener("click", function(){
				player.remove();
				g_selected_player = null;
			});
			return btn;
		})();
		panel.append(close_button).append(save_button);
		panel.css("height", 0).css("top", 0);
		return panel;
	})();

	var audio = $("<audio>Your browser doesn't support audio.</audio>");
	audio.bind("pause", function(e){
		{% block PLAY_STOP %}
		control_panel.children(".pause-button").removeClass("pause-button").addClass("play-button");
		{% endblock PLAY_STOP %}
	});
	audio.bind("play", function(e){
		{% block PLAY_START %}
		control_panel.children(".play-button").removeClass("play-button").addClass("pause-button");
		{% endblock  PLAY_START %}
	});
	audio.get(0).addEventListener('timeupdate', function(){
		progress_bar.children(".played-progress").css("width", (this.currentTime / this.duration) * 100 + '%');
	});
	audio.bind("ended", function(){
		if(audio.attr("loopStatus") == "loop-single"){
			player.get(0).playNewSong(player.get(0).prev_play_item);
		}
		else if(audio.attr("loopStatus") == "loop"){
			player.get(0).playNewSong(
				player.get(0).prev_play_item.is(playlist.children(":last-child"))
				||player.get(0).prev_play_item.next().is(playlist.children(":last-child"))
				?playlist.children(":first-child")
				:player.get(0).prev_play_item.next()
			);
		}
		else if(audio.attr("loopStatus") == "loop-random"){
		}
	});
	var control_panel = $("<div class=\"control-panel\"></div>");
	function createBackButton(){
		var back_button = $("<div class=\"back-button glyphicon button control-button\"></div>");
		back_button.get(0).addEventListener('click', function(){
			audio.get(0).currentTime = 0;
		});
		return back_button;
	}
	function createPlayButton(){
		var play_button = $("<div class=\"play-button glyphicon button control-button\"></div>");
		play_button.bind("click", function(){
			if(play_button.hasClass("play-button"))
				audio.get(0).play();
			else
				audio.get(0).pause();
		});
		return play_button;
	}
	function createLoopButton(){
		var loop_button = $("<div class=\"non-loop glyphicon button control-button\"></div>");
		audio.attr("loopStatus", "non-loop");
		loop_button.get(0).addEventListener('click', function(){
			if(loop_button.hasClass("non-loop")){
				loop_button.removeClass("non-loop").addClass("loop-single");
				audio.attr("loopStatus", "loop-single");
			}
			else if(loop_button.hasClass("loop-single")){
				loop_button.removeClass("loop-single").addClass("loop");
				audio.attr("loopStatus", "loop");
			}
			else if(loop_button.hasClass("loop")){
				loop_button.removeClass("loop").addClass("loop-random");
				audio.attr("loopStatus", "loop-random");
			}
			else{
				loop_button.removeClass("loop-random").addClass("non-loop");
				audio.attr("loopStatus", "non-loop");
			}
		});
		return loop_button;
	}
	function createVolumeBar(){
		var volume_bar = $("<div class=\"volume-bar\"></div>");
		for(var i = 0 ; i < 12 ; i ++)
			volume_bar.append($("<div class='vbar vbar-on' style='margin-top: " + (21 - i) + "px;height: " + (10 + i) + "px'></div>"));
		volume_bar.bind('click', function(e){
			var r = this.getBoundingClientRect();
			$(this).children().each(function(){
				var on = (this.getBoundingClientRect().left<e.clientX);
				$(this).removeClass(on?"vbar-off":"vbar-on").addClass(on?"vbar-on":"vbar-off");
			});
			$(this).closest(".player").children("audio").get(0).volume=(e.clientX - r.left + 0.0) / (r.right - r.left);
		});
		return volume_bar;
	}
	control_panel.append(createBackButton()).append(createPlayButton()).append(createLoopButton()).append(createVolumeBar());
	var playlist = $("<div class=\"playlist\"></div>");
	playlist.get(0).addEventListener("mousemove", function(e){
		e.in_p = true;
	});
	function createItemPlacer(){
		var placer = $("<div class=\"playitem np-item placer-active\"></div>");
		placer.bind("click", function(){
			g_moving.detach();
			g_moving.removeClass("moving");
			$(this).replaceWith(g_moving);
			g_moving = null;
		});
		return placer;
	}
	function createPlayItem(obj){
		var item = $("<div class=\"playitem np-item\"></div>").html(obj.name);
		item.get(0).obj = obj;
		item.get(0).addEventListener("click", function(e){
			player.get(0).playNewSong(item);
		});
		item.get(0).addEventListener("mousedown", function(e){
			if($(this).hasClass("playing-item")) return ;
			var item = this;
			g_counter.push(window.setTimeout(function(){
				item.parentNode.removeChild(item);
				$("body").append($(item).addClass("moving").css("left", e.pageX+20).css("top", e.pageY+10));
				g_moving = $(item);
			}, 1000));
			e.stopPropagation();
		});
		item.get(0).addEventListener("mousemove", function(e){
			if(g_moving){
				if(!g_activePlacer || !g_activePlacer.parent().is($(this).parent()))
				{
					if(g_activePlacer) g_activePlacer.remove();
					$(this).before(g_activePlacer = createItemPlacer());
				}
				else{
					var placer = createItemPlacer();
					$(this).replaceWith(placer);
					g_activePlacer.replaceWith($(this));
					g_activePlacer = placer;
				}
			}
		});
		return item;
	}
	function createLastItem(){
		var item = $("<div class=\"playitem np-item\"></div>");
		item.get(0).addEventListener("mousemove", function(e){
			if(g_moving){
				if($(this).prev().hasClass("placer-active"))
					$(this).prev().remove();
				else{
					if(!g_activePlacer || !g_activePlacer.parent().is($(this).parent()))
					{
						if(g_activePlacer) g_activePlacer.remove();
						$(this).before(g_activePlacer = createItemPlacer());
					}
					else{
						var placer = createItemPlacer();
						$(this).replaceWith(placer);
						g_activePlacer.replaceWith($(this));
						g_activePlacer = placer;
					}
				}
			}
		});
		return item;
	}
	for(idx in objs) playlist.append(createPlayItem(objs[idx]));
	playlist.append(createLastItem());
	player.append(side_panel.append(function_panel)).append(audio)
		.append(control_panel)
		.append(playlist);
	$("body").append(player);
	return player;
};
</script>
